-- Usuwanie tabel

DROP TABLE POST_POST_CATEGORY_RELATION;
DROP TABLE POST;
DROP TABLE POST_CATEGORY;
DROP TABLE BLOG_AUTHOR;
DROP TABLE BLOG_USER;
DROP TABLE POST_ARCHIVE;
DROP TABLE POST_POST_CATEGORY_RELATION_ARCHIVE;
DROP TABLE LOGS;

-- Dodawanie tabel
CREATE TABLE POST_CATEGORY
(
    POST_CATEGORY_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    NAME VARCHAR(20) NOT NULL
);

CREATE TABLE BLOG_USER
(
    BLOG_USER_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    LOGIN VARCHAR(20) NOT NULL,
    EMAIL VARCHAR(40) NOT NULL,
    BLOG_PASSWORD VARCHAR(20) NOT NULL
);

CREATE TABLE BLOG_AUTHOR
(
    BLOG_AUTHOR_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    BLOG_USER_ID INT,
    ABOUT VARCHAR(150),
    CONSTRAINT FK_BLOG_USER_ID FOREIGN KEY (BLOG_USER_ID) REFERENCES BLOG_USER (BLOG_USER_ID) ON DELETE CASCADE
);

CREATE TABLE POST
(
    POST_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    BLOG_AUTHOR_ID INT,
    TITLE VARCHAR(100),
    POST_CONTENT VARCHAR(1500),
    PUBLICATION_DATE TIMESTAMP,
    FOREIGN KEY (BLOG_AUTHOR_ID) REFERENCES BLOG_AUTHOR (BLOG_AUTHOR_ID) 
);

CREATE TABLE POST_POST_CATEGORY_RELATION
(   
    POST_CATEGORY_ID INT NOT NULL,
    POST_ID INT NOT NULL,
    FOREIGN KEY (POST_CATEGORY_ID) REFERENCES POST_CATEGORY (POST_CATEGORY_ID) ON DELETE CASCADE,
    FOREIGN KEY (POST_ID) REFERENCES POST (POST_ID) ON DELETE CASCADE,
    CONSTRAINT PK_POST_POST_CATEGORY UNIQUE (POST_CATEGORY_ID,POST_ID)
);

-- TABELE DO ARCHIWIZACJI

CREATE TABLE POST_ARCHIVE
(
    POST_ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    BLOG_AUTHOR_ID INT,
    TITLE VARCHAR(100),
    POST_CONTENT VARCHAR(1500),
    PUBLICATION_DATE TIMESTAMP,
    ARCHIVIZATION_DATE DATE
);

CREATE TABLE POST_POST_CATEGORY_RELATION_ARCHIVE
(   
    POST_CATEGORY_ID INT NOT NULL,
    POST_ID INT NOT NULL,
    CONSTRAINT PK_POST_POST_CATEGORY_ARCHIVE UNIQUE (POST_CATEGORY_ID,POST_ID),
    ARCHIVIZATION_DATE DATE
);

CREATE TABLE LOGS
(
    LOGS_ID         INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    OPERATION_NAME  VARCHAR2(30),
    OPERATION_DATE  DATE,
    OPERATION_TABLE VARCHAR2(40)
);

-- dodawanie rekordów

INSERT INTO POST_CATEGORY (NAME)
VALUES ('Kubernetes');
INSERT INTO POST_CATEGORY (NAME)
VALUES ('Docker');
INSERT INTO POST_CATEGORY (NAME)
VALUES ('Artifactory');
INSERT INTO POST_CATEGORY (NAME)
VALUES ('Prometheus');
INSERT INTO POST_CATEGORY (NAME)
VALUES ('Graphana');

INSERT INTO BLOG_USER (LOGIN,EMAIL,BLOG_PASSWORD)
VALUES ('nezale','email@gmail.com','jakieshaslo');
INSERT INTO BLOG_USER (LOGIN,EMAIL,BLOG_PASSWORD)
VALUES ('kappa','email@protonmail.com','jakieshaslo');
INSERT INTO BLOG_USER (LOGIN,EMAIL,BLOG_PASSWORD)
VALUES ('jakislogin','email@wp.pl','jakieshaslo');
INSERT INTO BLOG_USER (LOGIN,EMAIL,BLOG_PASSWORD)
VALUES ('costam','email@o2.pl','jakieshaslo');

INSERT INTO BLOG_AUTHOR (BLOG_USER_ID,ABOUT)
VALUES (1,'jakis tam opis');
INSERT INTO BLOG_AUTHOR (BLOG_USER_ID,ABOUT)
VALUES (2,'DevOps od urodzenia');

INSERT INTO POST (BLOG_AUTHOR_ID, TITLE, POST_CONTENT, PUBLICATION_DATE)
VALUES (1,'Kubernetes w praktyce','jakis tam konent o kubernetesie, architektura te sprawy',TO_TIMESTAMP('2021/06/06 10:13:18', 'YYYY/MM/DD HH:MI:SS'));
INSERT INTO POST (BLOG_AUTHOR_ID, TITLE, POST_CONTENT, PUBLICATION_DATE)
VALUES (1,'Monitoring klastra z wykorzystaniem Prometheusa i Graphany','jakis tam konent o prometheusie i graphanie',TO_TIMESTAMP('2021/04/12 08:13:18', 'YYYY/MM/DD HH:MI:SS'));
INSERT INTO POST (BLOG_AUTHOR_ID, TITLE, POST_CONTENT, PUBLICATION_DATE)
VALUES (2,'Networking w dockerze','jakis tam kontent o dockerze i jak dziala networking',TO_TIMESTAMP('2021/05/21 07:13:18', 'YYYY/MM/DD HH:MI:SS'));

INSERT INTO POST_POST_CATEGORY_RELATION (POST_CATEGORY_ID,POST_ID)
VALUES (1,1);
INSERT INTO POST_POST_CATEGORY_RELATION (POST_CATEGORY_ID,POST_ID)
VALUES (4,2);
INSERT INTO POST_POST_CATEGORY_RELATION (POST_CATEGORY_ID,POST_ID)
VALUES (5,2);
INSERT INTO POST_POST_CATEGORY_RELATION (POST_CATEGORY_ID,POST_ID)
VALUES (2,3);

-- procedury, funkcje itd

-- dodawanie rekordów
CREATE OR REPLACE PROCEDURE ADD_BLOG_USER(F_LOGIN VARCHAR2, F_EMAIL VARCHAR2, F_BLOG_PASSWORD VARCHAR2)
    IS
BEGIN
    INSERT INTO BLOG_USER (LOGIN,EMAIL,BLOG_PASSWORD)
    VALUES (F_LOGIN,F_EMAIL,F_BLOG_PASSWORD);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Wrong input data');
        DBMS_OUTPUT.PUT_LINE('ERROR CODE: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Error message: ' || SQLERRM);
END;
/

CREATE OR REPLACE PROCEDURE ADD_BLOG_AUTHOR(F_BLOG_USER_ID INT, F_ABOUT VARCHAR2)
    IS
BEGIN
    INSERT INTO BLOG_AUTHOR(BLOG_USER_ID,ABOUT)
    VALUES(F_BLOG_USER_ID,F_ABOUT);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Wrong input data');
        DBMS_OUTPUT.PUT_LINE('ERROR CODE: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Error message: ' || SQLERRM);
END;
/

CREATE OR REPLACE PROCEDURE ADD_CATEGORY(F_NAME VARCHAR2)
    IS
BEGIN
    INSERT INTO POST_CATEGORY (NAME)
    VALUES(F_NAME);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Wrong input data');
        DBMS_OUTPUT.PUT_LINE('ERROR CODE: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Error message: ' || SQLERRM);
END;
/

CREATE OR REPLACE PROCEDURE ADD_POST( F_BLOG_AUTHOR_ID INT, F_TITLE VARCHAR2, F_POST_CONTENT VARCHAR2, F_PUBLICATION_DATE TIMESTAMP DEFAULT CAST(CURRENT_DATE AS TIMESTAMP),F_POST_CATEGORY_ID INT)
    IS
    F_POST_ID INT;
BEGIN
    INSERT INTO POST(BLOG_AUTHOR_ID,TITLE,POST_CONTENT,PUBLICATION_DATE)
    VALUES (F_BLOG_AUTHOR_ID,F_TITLE,F_POST_CONTENT, F_PUBLICATION_DATE) returning POST_ID into F_POST_ID;
    ADD_POST_POST_CATEGORY_RELATION(F_POST_CATEGORY_ID,F_POST_ID);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Wrong input data');
        DBMS_OUTPUT.PUT_LINE('ERROR CODE: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Error message: ' || SQLERRM);
END;
/

CREATE OR REPLACE PROCEDURE ADD_POST_POST_CATEGORY_RELATION(F_POST_CATEGORY_ID INT, F_POST_ID INT)
    IS
BEGIN
    INSERT INTO POST_POST_CATEGORY_RELATION(POST_CATEGORY_ID,POST_ID)
    VALUES (F_POST_CATEGORY_ID, F_POST_ID);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Wrong input data');
        DBMS_OUTPUT.PUT_LINE('ERROR CODE: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Error message: ' || SQLERRM);
END;
/  

BEGIN
    ADD_POST(2,'jakistytul','jakiskontent',TO_TIMESTAMP('2021/05/21 07:13:18', 'YYYY/MM/DD HH:MI:SS'),3);
END;
/
-- aktualizowanie rekordów

CREATE OR REPLACE PROCEDURE UPDATE_BLOG_AUTHOR_ABOUT(F_BLOG_AUTHOR_ID INT, F_ABOUT VARCHAR2)
    IS
BEGIN
    UPDATE BLOG_AUTHOR SET ABOUT = F_ABOUT WHERE BLOG_AUTHOR_ID = F_BLOG_AUTHOR_ID;
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001,'Data where not updated');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Wrong input data');
        DBMS_OUTPUT.PUT_LINE('ERROR CODE: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Error message: ' || SQLERRM);
END;
/ 

CREATE OR REPLACE PROCEDURE UPDATE_POST_CATEGORY_NAME(F_POST_CATEGORY_ID INT, F_NAME VARCHAR2)
    IS
BEGIN
    UPDATE POST_CATEGORY SET NAME = F_NAME WHERE POST_CATEGORY_ID = F_POST_CATEGORY_ID;
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001,'Data where not updated');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Wrong input data');
        DBMS_OUTPUT.PUT_LINE('ERROR CODE: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Error message: ' || SQLERRM);
END;
/

CREATE OR REPLACE PROCEDURE UPDATE_BLOG_USER_PASSWORD(F_BLOG_USER_ID INT, F_BLOG_PASSWORD VARCHAR2)
    IS
BEGIN
    UPDATE BLOG_USER SET BLOG_PASSWORD = F_BLOG_PASSWORD WHERE BLOG_USER_ID = F_BLOG_USER_ID;
    IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001,'Data where not updated');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Wrong input data');
        DBMS_OUTPUT.PUT_LINE('ERROR CODE: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Error message: ' || SQLERRM);
END;
/

-- USUWANIE REKORDÓW

CREATE OR REPLACE PROCEDURE DELETE_BLOG_AUTHOR(F_BLOG_AUTHOR_ID INT)
    IS
    NO_ROWS_DELETED EXCEPTION;
    PRAGMA EXCEPTION_INIT (NO_ROWS_DELETED, -2001);
BEGIN
    DELETE FROM BLOG_AUTHOR WHERE BLOG_AUTHOR_ID = F_BLOG_AUTHOR_ID;
     IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'No data has been deleted');
    END IF;
EXCEPTION
    WHEN NO_ROWS_DELETED THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Wrong input data');
        DBMS_OUTPUT.PUT_LINE('ERROR CODE: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Error message: ' || SQLERRM);
END;   
/

CREATE OR REPLACE PROCEDURE DELETE_POST(F_POST_ID INT)
    IS
    NO_ROWS_DELETED EXCEPTION;
    PRAGMA EXCEPTION_INIT (NO_ROWS_DELETED, -2001);
BEGIN
    DELETE FROM POST WHERE POST_ID = POST_ID;
     IF SQL%ROWCOUNT = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'No data has been deleted');
    END IF;
EXCEPTION
    WHEN NO_ROWS_DELETED THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Wrong input data');
        DBMS_OUTPUT.PUT_LINE('ERROR CODE: ' || SQLCODE);
        DBMS_OUTPUT.PUT_LINE('Error message: ' || SQLERRM);
END;   
/

-- ARCHIWIZACJA DANYCH PO USUNIĘCIU
CREATE OR REPLACE TRIGGER ARCHIVE_POST
    BEFORE DELETE
    ON POST
    FOR EACH ROW
BEGIN
    INSERT INTO POST_ARCHIVE(BLOG_AUTHOR_ID,TITLE,POST_CONTENT,PUBLICATION_DATE,ARCHIVIZATION_DATE)
    VALUES(:OLD.BLOG_AUTHOR_ID,:OLD.TITLE,:OLD.POST_CONTENT,:OLD.PUBLICATION_DATE,CURRENT_DATE);
END;
/

CREATE OR REPLACE TRIGGER ARCHIVE_POST_POST_CATEGORY_RELATION
    BEFORE DELETE
    ON POST_POST_CATEGORY_RELATION
    FOR EACH ROW
BEGIN
    INSERT INTO POST_POST_CATEGORY_RELATION_ARCHIVE(POST_CATEGORY_ID,POST_ID,ARCHIVIZATION_DATE)
    VALUES(:OLD.POST_CATEGORY_ID,:OLD.POST_ID,CURRENT_DATE);
END;
/

DELETE FROM POST WHERE POST_ID = 4;

-- LOGOWANIE DO TABELI

CREATE OR REPLACE TRIGGER LOG_POST_DELETE
    AFTER DELETE
    ON POST
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('DELETE',CURRENT_DATE,'POST');
END;
/

CREATE OR REPLACE TRIGGER LOG_POST_INSERT
    AFTER INSERT
    ON POST
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('INSERT',CURRENT_DATE,'POST');
END;
/

CREATE OR REPLACE TRIGGER LOG_POST_UPDATE
    AFTER UPDATE
    ON POST
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('UPDATE',CURRENT_DATE,'POST');
END;
/

CREATE OR REPLACE TRIGGER LOG_POST_POST_CATEGORY_RELATION_DELETE
    AFTER DELETE
    ON POST_POST_CATEGORY_RELATION
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('DELETE',CURRENT_DATE,'POST_POST_CATEGORY_RELATION');
END;
/

CREATE OR REPLACE TRIGGER LOG_POST_POST_CATEGORY_RELATION_INSERT
    AFTER INSERT
    ON POST_POST_CATEGORY_RELATION
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('INSERT',CURRENT_DATE,'POST_POST_CATEGORY_RELATION');
END;
/

CREATE OR REPLACE TRIGGER LOG_POST_POST_CATEGORY_RELATION_UPDATE
    AFTER UPDATE
    ON POST_POST_CATEGORY_RELATION
BEGIN
    INSERT INTO LOGS (OPERATION_NAME, OPERATION_DATE, OPERATION_TABLE)
    VALUES ('UPDATE',CURRENT_DATE,'POST_POST_CATEGORY_RELATION');
END;
/

SELECT DISTINCT P.TITLE FROM POST P 
    INNER JOIN POST_POST_CATEGORY_RELATION R
        ON P.POST_ID = R.POST_ID
    INNER JOIN POST_CATEGORY C
        ON C.POST_CATEGORY_ID = R.POST_CATEGORY_ID
    WHERE C.NAME = 'Docker';

SELECT DISTINCT P.TITLE FROM POST P INNER JOIN POST_POST_CATEGORY_RELATION R ON P.POST_ID = R.POST_ID INNER JOIN POST_CATEGORY C ON C.POST_CATEGORY_ID = R.POST_CATEGORY_ID WHERE C.NAME ='Docker';

-- FUNKCJE Z PARAMETRAMI

CREATE OR REPLACE PROCEDURE GET_POSTS_BY_CATEGORY_NAME(F_CATEGORY_NAME IN VARCHAR, OUT_POST OUT VARCHAR2, OUT_POST_ID OUT INT)
    IS
    TYPE ROW_TYPE IS RECORD ( TITLE VARCHAR(150), POST_ID INT);
    ROW_RESULT ROW_TYPE;
    CUR SYS_REFCURSOR;
    
BEGIN
    OPEN CUR FOR 'SELECT DISTINCT P.TITLE, P.POST_ID FROM POST P INNER JOIN POST_POST_CATEGORY_RELATION R ON P.POST_ID = R.POST_ID INNER JOIN POST_CATEGORY C ON C.POST_CATEGORY_ID = R.POST_CATEGORY_ID WHERE C.NAME = ''' || F_CATEGORY_NAME || ''''; 
    FETCH CUR INTO ROW_RESULT;
    OUT_POST := ROW_RESULT.TITLE;
    OUT_POST_ID := ROW_RESULT.POST_ID;
END;
/

DECLARE
TITLE VARCHAR2(150);
POST_ID INT;
BEGIN
GET_POSTS_BY_CATEGORY_NAME('Docker',TITLE,POST_ID);
DBMS_OUTPUT.PUT_LINE('TITLE: ' || TITLE || ', POST_ID: ' || POST_ID );
END;
/

CREATE OR REPLACE PROCEDURE GET_USER_EMAIL_BY_ID(F_ID IN NUMBER, OUT_EMAIL OUT VARCHAR2)
    IS
    TYPE ROW_TYPE IS RECORD ( EMAIL VARCHAR2(40));
    ROW_RESULT ROW_TYPE;
    CUR SYS_REFCURSOR;
BEGIN
    OPEN CUR FOR 'SELECT EMAIL FROM BLOG_USER WHERE BLOG_USER_ID = ' || F_ID;
    FETCH CUR INTO ROW_RESULT;
    OUT_EMAIL := ROW_RESULT.EMAIL;
END;
/

--SELECT EMAIL FROM BLOG_USER WHERE LOGIN ='nezale';

DECLARE
EMAIL VARCHAR2(40);
BEGIN
GET_USER_EMAIL_BY_ID(1,EMAIL);
DBMS_OUTPUT.PUT_LINE('EMAIL: ' || EMAIL );
END;
/

--

-- FUNKCJE SPRAWDZAJACE POPRAWNOSC DANYCH
CREATE OR REPLACE FUNCTION IS_EMAIL_VALID(F_EMAIL VARCHAR2) RETURN BOOLEAN IS
BEGIN
    IF F_EMAIL LIKE '_%@__%.__%' THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
END;
/
